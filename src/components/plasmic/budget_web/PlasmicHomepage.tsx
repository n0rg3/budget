/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fXrxrXGB4nuGw6zaKktNkz
// Component: q_dw3jvS-dnG

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: fXrxrXGB4nuGw6zaKktNkz/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: q_dw3jvS-dnG/css

import CheckSvgIcon from "../plasmic_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  select?: Flex__<typeof AntdSelect>;
  category?: Flex__<"div">;
  category2?: Flex__<"div">;
  category3?: Flex__<"div">;
  category4?: Flex__<"div">;
  category5?: Flex__<"div">;
  categories?: Flex__<typeof TabButton>;
  categories2?: Flex__<"div">;
  diagram?: Flex__<typeof TabButton>;
  tabUnderline?: Flex__<typeof TabUnderline>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__b5GWh)}>
            <AntdSelect
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              className={classNames("__wab_instance", sty.select)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["select", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null, type: "option" },
                  { value: null, label: null, type: "option" },
                  { type: "option", label: null, value: null }
                ];
                __composite["0"]["value"] = "jan";
                __composite["0"]["label"] =
                  "\u042f\u043d\u0432\u0430\u0440\u044c";
                __composite["1"]["value"] = "feb";
                __composite["1"]["label"] =
                  "\u0424\u0435\u0432\u0440\u0430\u043b\u044c";
                __composite["2"]["label"] = "\u041c\u0430\u0440\u0442";
                __composite["2"]["value"] = "march";
                return __composite;
              })()}
              placeholder={"Select..."}
              popupScopeClassName={sty["select__popup"]}
              value={generateStateValueProp($state, ["select", "value"])}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vzNe0
              )}
            >
              {"\u0418\u0442\u043e\u0433\u043e:"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___9V92F)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"category"}
              data-plasmic-override={overrides.category}
              hasGap={true}
              className={classNames(projectcss.all, sty.category)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dm5Gj
                )}
              >
                {"Category"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button__lLXiy)}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__wid7C)}
                  role={"img"}
                />
              </AntdButton>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xz11Y
                )}
              >
                {"1250 RSD"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"category2"}
              data-plasmic-override={overrides.category2}
              hasGap={true}
              className={classNames(projectcss.all, sty.category2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__chZv
                )}
              >
                {"Category"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button__fkd0L)}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__bdtFm)}
                  role={"img"}
                />
              </AntdButton>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oTn6K
                )}
              >
                {"1250 RSD"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"category3"}
              data-plasmic-override={overrides.category3}
              hasGap={true}
              className={classNames(projectcss.all, sty.category3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ghFck
                )}
              >
                {"Category"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button___0ZQnF)}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__zw9EX)}
                  role={"img"}
                />
              </AntdButton>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kyKh3
                )}
              >
                {"1250 RSD"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"category4"}
              data-plasmic-override={overrides.category4}
              hasGap={true}
              className={classNames(projectcss.all, sty.category4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q0Wez
                )}
              >
                {"Category"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button__waKe)}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__hv5Zi)}
                  role={"img"}
                />
              </AntdButton>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k8Yf8
                )}
              >
                {"1250 RSD"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"category5"}
              data-plasmic-override={overrides.category5}
              hasGap={true}
              className={classNames(projectcss.all, sty.category5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___748He
                )}
              >
                {"Category"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button__jyh49)}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__kxV1X)}
                  role={"img"}
                />
              </AntdButton>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dSeVz
                )}
              >
                {"1250 RSD"}
              </div>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qSeM2)}>
            <TabButton
              data-plasmic-name={"categories"}
              data-plasmic-override={overrides.categories}
              className={classNames("__wab_instance", sty.categories)}
              tabKey={"tab1"}
            >
              <Button
                className={classNames("__wab_instance", sty.button__bZdAd)}
              >
                <div
                  data-plasmic-name={"categories2"}
                  data-plasmic-override={overrides.categories2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.categories2
                  )}
                >
                  {"Categories"}
                </div>
              </Button>
            </TabButton>
            <TabButton
              data-plasmic-name={"diagram"}
              data-plasmic-override={overrides.diagram}
              className={classNames("__wab_instance", sty.diagram)}
              tabKey={"tab2"}
            >
              <Button
                startIcon={
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg__l0Eho)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qmBz7
                  )}
                >
                  {"Diagram"}
                </div>
              </Button>
            </TabButton>
            <Button>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__waxeB
                )}
              >
                {"List"}
              </div>
            </Button>
            <TabUnderline
              data-plasmic-name={"tabUnderline"}
              data-plasmic-override={overrides.tabUnderline}
              className={classNames("__wab_instance", sty.tabUnderline)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "select",
    "category",
    "category2",
    "category3",
    "category4",
    "category5",
    "categories",
    "categories2",
    "diagram",
    "tabUnderline"
  ],
  select: ["select"],
  category: ["category"],
  category2: ["category2"],
  category3: ["category3"],
  category4: ["category4"],
  category5: ["category5"],
  categories: ["categories", "categories2"],
  categories2: ["categories2"],
  diagram: ["diagram"],
  tabUnderline: ["tabUnderline"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  select: typeof AntdSelect;
  category: "div";
  category2: "div";
  category3: "div";
  category4: "div";
  category5: "div";
  categories: typeof TabButton;
  categories2: "div";
  diagram: typeof TabButton;
  tabUnderline: typeof TabUnderline;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "fXrxrXGB4nuGw6zaKktNkz"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent("select"),
    category: makeNodeComponent("category"),
    category2: makeNodeComponent("category2"),
    category3: makeNodeComponent("category3"),
    category4: makeNodeComponent("category4"),
    category5: makeNodeComponent("category5"),
    categories: makeNodeComponent("categories"),
    categories2: makeNodeComponent("categories2"),
    diagram: makeNodeComponent("diagram"),
    tabUnderline: makeNodeComponent("tabUnderline"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
